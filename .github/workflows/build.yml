name: Build

on:
  push:
# TODO: using branches might exclude forks so commented out at the moment.
#    branches:
#      - master
    paths-ignore: [ "Examples/**", "*.md", ".gitignore", "LICENSE" ]
  pull_request:
    paths-ignore: [ "Examples/**", "*.md", ".gitignore", "LICENSE" ]
  release:
    types:
      - created

env:
  WINDOWS_ARTIFACT_NAME: UNFLoader-Windows
  LINUX_ARTIFACT_NAME: UNFLoader-Linux
  MACOS_ARTIFACT_NAME: UNFLoader-macOS

jobs:
  build-windows:
    runs-on: windows-2019
    env:
      SOLUTION_FILE_PATH: ./UNFLoader/UNFLoader.sln
      BUILD_CONFIGURATION: Release
      BUILD_DIRECTORY: ./UNFLoader/Release

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: '16.0'
        msbuild-architecture: x86

    - name: Build
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: msbuild /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.SOLUTION_FILE_PATH }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.WINDOWS_ARTIFACT_NAME }}
        path: ${{ env.BUILD_DIRECTORY }}/UNFLoader.exe

  build-linux:
    runs-on: ubuntu-latest
    env:
      LIBFTD2XX_VERSION: '1.4.8'
      SOURCES_DIRECTORY: ./UNFLoader
      BUILD_DIRECTORY: ./UNFLoader

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get install libncurses5-dev libncursesw5-dev

      - name: Download and unzip libftd2xx
        run: |
          curl -L https://www.ftdichip.com/Drivers/D2XX/Linux/libftd2xx-x86_64-${{ env.LIBFTD2XX_VERSION }}.gz --output libftd2xx.gz
          mkdir ./libftd2xx
          tar xvzf libftd2xx.gz -C libftd2xx
          
      - name: Copy header files from libftd2xx
        run: cp ./libftd2xx/release/WinTypes.h ./libftd2xx/release/ftd2xx.h ${{ env.SOURCES_DIRECTORY }}/Include

      - name: Install FTDI driver
        run: |
          sudo cp ./libftd2xx/release/build/libftd2xx.so.${{ env.LIBFTD2XX_VERSION }} /usr/local/lib
          cd /usr/local/lib
          sudo ln -s libftd2xx.so.${{ env.LIBFTD2XX_VERSION }} libftd2xx.so
          sudo chmod 0755 libftd2xx.so.${{ env.LIBFTD2XX_VERSION }}

      - name: Build
        run: |
          cd ${{ env.SOURCES_DIRECTORY }}
          make

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.LINUX_ARTIFACT_NAME }}
          path: ${{ env.BUILD_DIRECTORY }}/UNFLoader

  build-macos:
    runs-on: macos-latest
    env:
      LIBFTD2XX_VERSION: '1.4.24'
      SOURCES_DIRECTORY: ./UNFLoader/
      BUILD_DIRECTORY: ./UNFLoader

    steps:
      - uses: actions/checkout@v3

      - name: Build
        run: |
          echo Install helper package
          curl -L https://www.ftdichip.com/old2020/Drivers/D2XX/MacOSX/D2xxHelper_v2.0.0.pkg --output helper.pkg
          sudo installer -pkg ./helper.pkg -target /

          echo Install D2XX drivers
          curl -L https://ftdichip.com/wp-content/uploads/2021/05/D2XX${{ env.LIBFTD2XX_VERSION }}.zip --output macos_drivers.zip
          unzip ./macos_drivers.zip

          echo Attach drivers disk image
          hdiutil attach ./D2XX${{ env.LIBFTD2XX_VERSION }}.dmg

          echo Install drivers to installation location
          sudo mkdir -p /usr/local/lib
          sudo mkdir -p /usr/local/include
          sudo cp /Volumes/dmg/release/build/libftd2xx.${{ env.LIBFTD2XX_VERSION }}.dylib /usr/local/lib/libftd2xx.${{ env.LIBFTD2XX_VERSION }}.dylib
          sudo ln -sf /usr/local/lib/libftd2xx.${{ env.LIBFTD2XX_VERSION }}.dylib /usr/local/lib/libftd2xx.dylib
          sudo cp /Volumes/dmg/release/ftd2xx.h /usr/local/include/ftd2xx.h
          sudo cp /Volumes/dmg/release/WinTypes.h /usr/local/include/WinTypes.h

          echo Build macOS App
          cd ${{ env.SOURCES_DIRECTORY }}
          make
          cd ..

          echo Detatch drivers disk image
          diskutil eject /Volumes/dmg

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MACOS_ARTIFACT_NAME }}
          path: ${{ env.BUILD_DIRECTORY }}/UNFLoader


# TODO: what (if any) steps should be run on a fork!
  attempt-releases:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]

    steps:
    - uses: actions/checkout@v3

    - name: Download Windows artifact
      id: download-windows-artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.WINDOWS_ARTIFACT_NAME }}
        path: ${{ runner.temp }}/windows-artifact-download

    - name: Download Linux artifact
      id: download-linux-artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.LINUX_ARTIFACT_NAME }}
        path: ${{ runner.temp }}/linux-artifact-download

    - name: Download macOS artifact
      id: download-macos-artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.MACOS_ARTIFACT_NAME }}
        path: ${{ runner.temp }}/macos-artifact-download

    # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-ruby
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
        ruby-version: '3.1'
      continue-on-error: true

    - name: Install Package Creator
      run: |
        echo installing jordansissel/fpm ruby package
        gem install fpm
      continue-on-error: true

    # https://fpm.readthedocs.io/en/v1.15.0/getting-started.html
    - name: Generate packages for linux based OS
      run: |
        # Create a folder packages can control
        mkdir -p ${{ runner.temp }}/packages

        # Move and make executable lowercase (otherwise could be issues)
        cp $Source_Directory_Path/$Package_Name ${{ runner.temp }}/packages/${Package_Name,,}

        # Make sure executible has execute permissions
        chmod 755 ${{ runner.temp }}/packages/${Package_Name,,}

        # base directory for package generation
        cd ${{ runner.temp }}/packages

        echo Generating debian based package
        fpm \
          -t deb \
          -s dir \
          -p ${Package_Name,,}-$Package_Version-$Package_Revision-any.deb \
          --name ${Package_Name,,} \
          --license $Package_License \
          --version $Package_Version \
          --architecture all \
          --depends bash \
          --description "$Package_Description" \
          --url "$Package_Url" \
          --maintainer "$Package_Maintainer" \
          ${Package_Name,,}=$Installation_Directory_Path

        echo Generating RPM based package
        fpm \
          -t rpm \
          -s dir \
          -p ${Package_Name,,}-$Package_Version-$Package_Revision-x86_64.rpm \
          --name ${Package_Name,,} \
          --license $Package_License \
          --version $Package_Version \
          --architecture x86_64 \
          --depends nginx \
          --description "$Package_Description" \
          --url "$Package_Url" \
          --maintainer "$Package_Maintainer" \
          ${Package_Name,,}=$Installation_Directory_Path
      continue-on-error: true
      env:
        Source_Directory_Path: ${{ steps.download-linux-artifact.outputs.download-path }}
        Installation_Directory_Path: /usr/bin/
        Package_Name: UNFLoader
        Package_Version: '1.0.0' # ${{ github.ref }}
        Package_Revision: latest # ${{ github.run_id }}
        Package_License: DWTFYWTPL # TODO: is this the correct naming?!
        Package_Description: UNFLoader for the N64
        Package_Url: https://n64brew.com
        Package_Maintainer:  buu342

    - name: Generate individual directories for binaries and compress
      run: |
        cd ${{ runner.temp }}
        mkdir -p ${{ runner.temp }}/binaries/linux
        # Move and rename the binary to lowercase for better support.
        cp ${{ steps.download-linux-artifact.outputs.download-path }}/UNFLoader ${{ runner.temp }}/binaries/linux/unfloader
        # Make sure the binary is executable.
        chmod 755 ${{ runner.temp }}/binaries/linux/unfloader
        tar -zcvf unfloader-linux.tar.gz binaries/linux

        mkdir -p ${{ runner.temp }}/binaries/macOS
        # Move the binary.
        cp ${{ steps.download-macos-artifact.outputs.download-path }}/UNFLoader ${{ runner.temp }}/binaries/macOS/UNFLoader
        tar -zcvf UNFLoader-macOS.tar.gz binaries/macOS
        
        mkdir -p ${{ runner.temp }}/binaries/windows
        # Move the binary.
        cp ${{ steps.download-windows-artifact.outputs.download-path }}/UNFLoader.exe ${{ runner.temp }}/binaries/windows/UNFLoader.exe
        zip -r unfloader-windows.zip binaries/windows

    - name: Convert files for release upload
      run: |
        mv ${{ github.workspace }}/LICENSE ${{ github.workspace }}/LICENSE.txt
        mv ${{ github.workspace }}/INSTALLATION.md ${{ github.workspace }}/INSTALLATION.txt

    - name: Generate draft release notes
      run: |
        CHANGELOG_TEXT='Release of UNFLoader and its respective N64-side library (targeting libultra and libdragon).</br>'
        CHANGELOG_TEXT+='</br>'
        CHANGELOG_TEXT+='Fully supports USB I/O for:</br>'
        CHANGELOG_TEXT+='    * 64Drive HW1</br>'
        CHANGELOG_TEXT+='    * 64Drive HW2</br>'
        CHANGELOG_TEXT+='    * EverDrive 3.0 (OS 3.06 only)</br>'
        CHANGELOG_TEXT+='    * EverDrive X7</br>'
        CHANGELOG_TEXT+='    * SC64</br>'
        CHANGELOG_TEXT+='</br>'
        CHANGELOG_TEXT+='Compiled executables are available below:</br>'
        echo "$CHANGELOG_TEXT" > ${{ github.workspace }}-CHANGELOG.txt

# TODO: what (if any) steps should be run on a fork!
# TODO: what about compiled examples?

    - name: Generate Release
#      if: startsWith(github.ref, 'refs/heads/master') # Actually, should we only do it on a tag?! if: startsWith(github.ref, 'refs/tags/')
      if: github.event_name != 'pull_request'
      uses: softprops/action-gh-release@v1
      with:
        draft: true # always make sure there is a manual step
        prerelease: false
        body_path: ${{ github.workspace }}-CHANGELOG.txt
        name: "UNFLoader"
        tag_name: "latest"
        files: |
          ${{ runner.temp }}/packages/**/*.deb
          ${{ runner.temp }}/packages/**/*.rpm
          ${{ runner.temp }}/*.zip
          ${{ runner.temp }}/*.tar.gz
          LICENSE.txt
          INSTALLATION.txt

    - name: Generate Pre-Release
      if: github.event_name != 'pull_request'
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: true
        name: "UNFLoader-prerelease-latest"
        tag_name: "prerelease-latest"
        files: |
          ${{ runner.temp }}/*.zip
          ${{ runner.temp }}/*.tar.gz
          LICENSE.txt
          INSTALLATION.txt
